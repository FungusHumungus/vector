[transforms.merge]
title = "Merge"
allow_you_to_description = "merge partial log events into a single event"
common = false
function_category = "merge"
guides = []
input_types = ["log"]
output_types = ["log"]
resources = []

[transforms.merge.options.merge_fields]
type = "[string]"
common = true
default = ["message"]
null = false
description = """\
Fields to merge.

The values of these fields will be merged into the _first_ partial event. \
Fields not specified here will be ignored. Merging process takes the first \
buffered partial event, then loops over the rest of them and merges in the \
fields from each buffered partial event. The last event with the field takes \
priority and overrides the previous event.

Finally, the non-partial event fields are merged in, producing the resulting \
merged event.\
"""

[transforms.merge.options.partial_event_marker]
type = "string"
common = true
default = "_partial"
null = false
description = """\
The field that indicates that the event is partial. A consequent stream of \
partial events along with the first non-partial event will be merged together.\
"""

[[transforms.merge.output.log.examples]]
label = "Default"
body = """\
Given the following _default_ configuration:

<CodeHeader fileName="vector.toml" />

```toml
[transforms.merge_events]
  type = "merge"
  inputs = [...]
```

And these three partial [`log` events][docs.data-model.log]:

<CodeHeader fileName="first log event" />

```javascript
{
  "message": "First",
  "_partial": true,
  "custom_string_field": "value1",
  "custom_int_field": 1
}
```

and

<CodeHeader fileName="second log event" />

```javascript
{
  "message": "Second",
  "_partial": true,
  "custom_string_field": "value2",
  "custom_int_field": 2
}
```

and

<CodeHeader fileName="third log event" />

```javascript
{
  "message": "Third",
  "custom_string_field": "value3",
  "custom_int_field": 3
}
```

A single _merged_ log event will be produced:

```javascript
{
  "message": "FirstSecondThird",
  "custom_string_field": "value1",
  "custom_int_field": 1
}
```

Notice that `custom_string_field` and `custom_int_field` were not overridden. \
This is because they were not listed in the `merge_fields` option.\
"""

[[transforms.merge.output.log.examples]]
label = "With Merge Fields"
body = """\
Given the following _default_ configuration:

<CodeHeader fileName="vector.toml" />

```toml
[transforms.merge_events]
  type = "merge"
  inputs = [...]
  merge_fields = ["message", "custom_string_field", "custom_int_field"]
```

And these three partial [`log` events][docs.data-model.log]:

<CodeHeader fileName="first log event" />

```javascript
{
  "message": "First",
  "_partial": true,
  "custom_string_field": "value1",
  "custom_int_field": 1
}
```

and

<CodeHeader fileName="second log event" />

```javascript
{
  "message": "Second",
  "_partial": true,
  "custom_string_field": "value2",
  "custom_int_field": 2
}
```

and

<CodeHeader fileName="third log event" />

```javascript
{
  "message": "Third",
  "custom_string_field": "value3",
  "custom_int_field": 3
}
```

A single _merged_ log event will be produced:

```javascript
{
  "message": "FirstSecondThird",
  "custom_string_field": "value1value2value3",
  "custom_int_field": 3
}
```

Notice that `custom_string_field` is concatenated and `custom_int_field` \
overridden. This is because it was specified in the `merge_fields` option.\
"""
